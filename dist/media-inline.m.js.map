{"version":3,"file":"media-inline.m.js","sources":["../src/index.js"],"sourcesContent":["/**\r\n *\r\n * @param {string} string - transforma la expresiÃ³n de cadena a un evento suscrito a @media\r\n * @example `value1 200w value2 300w value3 200w!`\r\n * The callback will receive, for example, value1 when the browser displays the condition `min-width: 200w`\r\n * The callback will receive, for example, value1 when the browser displays the condition `min-width:300w`\r\n * The callback will receive, for example, value1 when the browser displays the condition `max-width:300w`\r\n * @param {function} callback\r\n */\r\n\r\nexport function media(string, callback) {\r\n    let match = [],\r\n        handler;\r\n\r\n    string.split(/([\\d]+w(?:\\!){0,1})/).reduce((value, after) => {\r\n        let test = after.match(/(\\d+)w(\\!){0,1}/);\r\n        if (test) {\r\n            let width = Number(test[1]);\r\n            match.push({\r\n                width,\r\n                value: value.replace(/^(\\s+)|(\\s+)$/g, \"\"),\r\n                media: window.matchMedia(\r\n                    `(${test[2] ? \"max\" : \"min\"}-width : ${width}px)`\r\n                )\r\n            });\r\n            return \"\";\r\n        } else {\r\n            return after;\r\n        }\r\n    });\r\n    /**\r\n     * Pre-order the @media to avoid overwriting by event.\r\n     */\r\n    match = match.sort((a, b) => (a.width > b.width ? -1 : 1));\r\n\r\n    handler = () => {\r\n        match.some(({ media, value }) => {\r\n            if (media.matches) {\r\n                callback(value, media);\r\n                return true;\r\n            }\r\n        });\r\n    };\r\n\r\n    match.forEach(({ media }) => media.addListener(handler));\r\n\r\n    handler();\r\n}\r\n\r\nexport function srcSet(element, string) {\r\n    media(string, (value, match) => {\r\n        element.src = value;\r\n    });\r\n}\r\n\r\nexport function imageSet(element, string) {\r\n    media(string, (value, match) => {\r\n        if (/\\)(.+)$/.test(value)) {\r\n            element.style.background = value;\r\n        } else {\r\n            element.style.backgroundImage = value;\r\n        }\r\n    });\r\n}\r\n"],"names":["media","string","callback","let","handler","match","split","reduce","value","after","test","width","Number","push","replace","window","matchMedia","sort","a","b","some","ref","matches","forEach","addListener","srcSet","element","src","imageSet","style","background","backgroundImage"],"mappings":"AAUO,SAASA,EAAMC,EAAQC,GAC1BC,IACIC,EADAC,KAGJJ,EAAOK,MAAM,uBAAuBC,gBAAQC,EAAOC,GAC/CN,IAAIO,EAAOD,EAAMJ,MAAM,mBACvB,GAAIK,EAAM,CACNP,IAAIQ,EAAQC,OAAOF,EAAK,IAQxB,OAPAL,EAAMQ,YACFF,EACAH,MAAOA,EAAMM,QAAQ,iBAAkB,IACvCd,MAAOe,OAAOC,gBACNN,EAAK,GAAK,MAAQ,mBAAiBC,WAGxC,GAEP,OAAOF,IAMfJ,EAAQA,EAAMY,cAAMC,EAAGC,UAAOD,EAAEP,MAAQQ,EAAER,OAAS,EAAI,IAEvDP,aACIC,EAAMe,cAAMC,iBACR,GAAIrB,EAAMsB,QAEN,OADApB,UAAgBF,IACT,KAKnBK,EAAMkB,iBAASF,kBAAoBG,YAAYpB,KAE/CA,IAGG,SAASqB,EAAOC,EAASzB,GAC5BD,EAAMC,WAASO,EAAOH,GAClBqB,EAAQC,IAAMnB,IAIf,SAASoB,EAASF,EAASzB,GAC9BD,EAAMC,WAASO,EAAOH,GACd,UAAUK,KAAKF,GACfkB,EAAQG,MAAMC,WAAatB,EAE3BkB,EAAQG,MAAME,gBAAkBvB"}