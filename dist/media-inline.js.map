{"version":3,"file":"media-inline.js","sources":["../src/index.js"],"sourcesContent":["/**\r\n *\r\n * @param {string} string - transforma la expresiÃ³n de cadena a un evento suscrito a @media\r\n * @example `value1 200w value2 300w value3 200w!`\r\n * The callback will receive, for example, value1 when the browser displays the condition `min-width: 200w`\r\n * The callback will receive, for example, value1 when the browser displays the condition `min-width:300w`\r\n * The callback will receive, for example, value1 when the browser displays the condition `max-width:300w`\r\n * @param {function} callback\r\n */\r\n\r\nexport function media(string, callback) {\r\n    let match = [],\r\n        handler;\r\n\r\n    string.split(/([\\d]+w(?:\\!){0,1})/).reduce((value, after) => {\r\n        let test = after.match(/(\\d+)w(\\!){0,1}/);\r\n        if (test) {\r\n            let width = Number(test[1]),\r\n                type = test[2] ? \"max\" : \"min\";\r\n            match.push({\r\n                type,\r\n                width,\r\n                value: value.replace(/^(\\s+)|(\\s+)$/g, \"\"),\r\n                media: window.matchMedia(`(${type}-width : ${width}px)`)\r\n            });\r\n            return \"\";\r\n        } else {\r\n            return after;\r\n        }\r\n    });\r\n    /**\r\n     * Pre-order the @media to avoid overwriting by event.\r\n     */\r\n    match = match.sort((a, b) => (a.width > b.width ? -1 : 1));\r\n\r\n    handler = () => {\r\n        let group = match.filter(item => {\r\n                return item.media.matches;\r\n            }),\r\n            groupMax = group.filter(item => item.type === \"max\"),\r\n            select;\r\n\r\n        if (groupMax.length) {\r\n            select = groupMax.reverse()[0];\r\n        } else {\r\n            select = group[0];\r\n        }\r\n\r\n        if (select) callback(select.value, select.media);\r\n    };\r\n\r\n    match.forEach(({ media }) => media.addListener(handler));\r\n\r\n    handler();\r\n}\r\n\r\nexport function srcSet(element, string) {\r\n    media(string, (value, match) => {\r\n        element.src = value;\r\n    });\r\n}\r\n\r\nexport function imageSet(element, string) {\r\n    media(string, (value, match) => {\r\n        if (/\\)(.+)$/.test(value)) {\r\n            element.style.background = value;\r\n        } else {\r\n            element.style.backgroundImage = value;\r\n        }\r\n    });\r\n}\r\n"],"names":["media","string","callback","let","handler","match","split","reduce","value","after","test","width","Number","type","push","replace","window","matchMedia","sort","a","b","select","group","filter","item","matches","groupMax","length","reverse","forEach","ref","addListener","element","src","style","background","backgroundImage"],"mappings":"AAUO,SAASA,EAAMC,EAAQC,GAC1BC,IACIC,EADAC,KAGJJ,EAAOK,MAAM,uBAAuBC,gBAAQC,EAAOC,GAC/CN,IAAIO,EAAOD,EAAMJ,MAAM,mBACvB,GAAIK,EAAM,CACNP,IAAIQ,EAAQC,OAAOF,EAAK,IACpBG,EAAOH,EAAK,GAAK,MAAQ,MAO7B,OANAL,EAAMS,WACFD,QACAF,EACAH,MAAOA,EAAMO,QAAQ,iBAAkB,IACvCf,MAAOgB,OAAOC,eAAeJ,cAAgBF,WAE1C,GAEP,OAAOF,IAMfJ,EAAQA,EAAMa,cAAMC,EAAGC,UAAOD,EAAER,MAAQS,EAAET,OAAS,EAAI,IAEvDP,aACID,IAIIkB,EAJAC,EAAQjB,EAAMkB,gBAAOC,UACVA,EAAKxB,MAAMyB,UAEtBC,EAAWJ,EAAMC,gBAAOC,SAAsB,QAAdA,EAAKX,QAIrCQ,EADAK,EAASC,OACAD,EAASE,UAAU,GAEnBN,EAAM,KAGPpB,EAASmB,EAAOb,MAAOa,EAAOrB,QAG9CK,EAAMwB,iBAASC,kBAAoBC,YAAY3B,KAE/CA,mCAGG,SAAgB4B,EAAS/B,GAC5BD,EAAMC,WAASO,EAAOH,GAClB2B,EAAQC,IAAMzB,sBAIf,SAAkBwB,EAAS/B,GAC9BD,EAAMC,WAASO,EAAOH,GACd,UAAUK,KAAKF,GACfwB,EAAQE,MAAMC,WAAa3B,EAE3BwB,EAAQE,MAAME,gBAAkB5B"}